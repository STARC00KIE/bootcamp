"""
오름차순으로  정렬된  일차원  배열의  원소 중  인덱스  번호(인덱스  번호는  0번부터 시작합니다.) 와 자기 자신의 값이 같으면 이 원소를 고정된 숫자라고 합니다.
예를  들어  [-3,  -2,  0,  1,  3,  5,  8,  9,  12]  배열에서  고정된  숫자는  5입니다.  배열  원소  5의 인덱스 번호가 5로 원소와 인덱스 값이 같습니다.
매개변수 nums에 오름차순으로 정렬된  정수 배열이  주어지면  배열  원소 중  고정된 숫자를  찾아 반환하는  프로그램을 작성하세요.
고정된 숫자는 유일합니다. 고정된 숫자가 없다면  -1를 반환하세요.
"""
def solution(nums):
    # 이진 탐색의 시작과 끝 인덱스 초기화
    left = 0
    right = len(nums)
    
    # 이진 탐색 수행
    while left < right:
        # 중간 인덱스 계산
        mid = (left + right) // 2  
        print(f"mid: {mid}")
        
        # 고정된 숫자를 찾은 경우
        if mid == nums[mid]:
            return mid
        # 중간 인덱스가 해당 위치의 값보다 큰 경우
        # 오른쪽 부분에서 탐색 (인덱스가 값보다 크면 그 이후의 값들도 인덱스보다 클 수 없음)
        elif mid > nums[mid]:  
            left = mid + 1 
        # 중간 인덱스가 해당 위치의 값보다 작은 경우
        # 왼쪽 부분에서 탐색 (인덱스가 값보다 작으면 그 이전의 값들도 인덱스보다 작을 수 없음)
        else:
            right = mid 
    # 고정된 숫자를 찾지 못한 경우
    return -1

# 테스트 케이스들
print(solution([-3, -2, 0, 1, 3, 5, 8, 9, 12]))  # 5 반환 (인덱스 5의 값이 5)
print(solution([-10, -5, -2, 3, 4, 6, 7, 8]))    # -1 반환 (고정된 숫자 없음)
print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9]))     # -1 반환 (고정된 숫자 없음)
print(solution([-5, -3, 0, 1, 2, 3, 4, 7]))      # 7 반환 (인덱스 7의 값이 7)
print(solution([0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))  # 0 반환 (인덱스 0의 값이 0)