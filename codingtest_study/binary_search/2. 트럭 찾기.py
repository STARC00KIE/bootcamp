"""
현수는 이사를 하려고 합니다.
이삿짐 센터에는 여러 개의  트럭이 있습니다. 각 트럭은 짐을 실을 수 있는 총 무게 제한이 있 습니다.
이사 비용은 현수가 선택한  트럭의 무게 제한에 곱하기  10을 한 값입니다.
nums에 각 트럭의 무게 제한이 오름차순으로 주어지고, 
현수의 이사하는 짐의 총 무게가 weight주어지면 현수가 짐을 실을 수 있는 최소비용의 트럭을 찾아 선택된 트럭의 인덱스 번 호를 반환하는 프로그램을 작성하세요.
인덱스 번호는 0번부터 시작합니다.
현수가 이사할  수 있는 트럭이 존재하지 않을 경우 -1를 반환합니다
"""

def solution(nums, weight):
    # 이진 탐색의 시작과 끝 인덱스 초기화
    left = 0  # 탐색 범위의 시작
    right = len(nums)  # 탐색 범위의 끝 (배열 길이)
    
    # 이진 탐색 수행
    while left < right:  # left가 right보다 작을 때까지 반복
        mid = (left + right) // 2  # 중간 인덱스 계산
        
        if weight > nums[mid]:  # 찾는 무게가 중간값보다 크면
            left = mid + 1  # 오른쪽 부분 탐색
        else:  # 찾는 무게가 중간값보다 작거나 같으면
            right = mid  # 왼쪽 부분 탐색 (중간값 포함)
    
    # 결과 반환
    # right가 배열 길이와 같으면 적절한 트럭을 찾지 못한 것
    # 그렇지 않으면 right가 찾은 트럭의 인덱스
    return -1 if right == len(nums) else right

# 테스트 케이스
print(solution([100, 120, 150, 160, 165, 170, 175, 180, 190, 200], 170))                                          
print(solution([200, 250, 260, 265, 275, 290, 300, 325, 350, 370], 270))
print(solution([50, 55, 60, 65, 70, 80, 90], 80))
print(solution([20, 30, 40, 50, 60, 70], 90))
print(solution([10, 30, 50, 70, 80, 90, 100, 110, 120], 115))